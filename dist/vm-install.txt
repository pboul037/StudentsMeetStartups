
- Reconfigured locales to add en_CA.UTF-8:

dpkg-reconfigure locales

- Update aptitude db and upgrade system:

aptitude update
aptitude upgrade

- Create unprivileged users:

adduser ngagnon
adduser pboulet

- Install vim, use as default editor

aptitude install vim
update-alternatives --config editor

- Disabled SSH root login:

vi /etc/ssh/sshd_config
# Set PermitRootLogin to no
# Add:
AllowUsers ngagnon pboulet
:wq

- Install and configure sudo:

aptitude install sudo
visudo
# Copy the line for root twice (one for pboulet, one for ngagnon)
:wq

- Disabled root account all together:

su - ngagnon
sudo passwd -l root

- Install packages:

sudo aptitude install vim zsh wget mysql-server ntp shorewall fail2ban apache2 libapache2-mod-proxy-html

- Install Node.JS:

curl -sL https://deb.nodesource.com/setup | bash -
sudo aptitude install nodejs

- Configure firewall (shorewall):

sudo cp /usr/share/doc/shorewall/examples/one-interface/{interfaces,zones,policy,rules} /etc/shorewall

sudo cat >> /etc/shorewall/rules
# Permit incoming SSH traffic

ACCEPT          net             $FW             tcp 22

# Permit incoming HTTP traffic

ACCEPT          net             $FW             tcp 80

^D

vi /etc/default/shorewall
# Change startup = 0 to:
startup = 1
:wq

sudo shorewall start

- Configure Apache web server as reverse proxy:

sudo vim /etc/apache2/sites-available/studentsmeetstartups.com 
<VirtualHost *:80>
    ServerAdmin davy.brion@thatextramile.be
    ServerName studentsmeetstartups.com
    ServerAlias www.studentsmeetstartups.com
    DocumentRoot /var/www/studentsmeetstartups.com
 
    ProxyRequests off
 
    <Proxy *>
        Order deny,allow
        Allow from all
    </Proxy>
 
    ProxyPassMatch ^(/.*\.(css|js|jpg|jpeg|gif|html|map))$ !
    ProxyPass / http://localhost:3000/
    ProxyPassReverse / http://localhost:3000/
</VirtualHost>
:wq

sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2ensite studentsmeetstartups.com 
sudo service apache2 reload

- Create and enable sysvinit script:

cat | sudo tee /etc/init.d/smeetsapp
#!/bin/sh
### BEGIN INIT INFO
# Provides:          smeetsapp
# Required-Start:    $local_fs $remote_fs $network $syslog $mail-transport-agent
# Required-Stop:     $local_fs $remote_fs $network $syslog $mail-transport-agent
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop StudentsMeetStartups application
### END INIT INFO

DESC="StudentsMeetStartups application"
DAEMON_USER=smeetsapp
DAEMON=/bin/sh
DAEMON_ARGS=/opt/smeetsapp/bin/smeetsapp.sh
PIDFILE=/var/run/smeetsapp.pid

. /lib/init/vars.sh
. /lib/lsb/init-functions

do_start()
{
    # To allow many connections
    ulimit -n 32767
    
    # TCP tweaks
    sysctl -q -w net.ipv4.tcp_retries2=5 # 15
    sysctl -q -w net.ipv4.tcp_keepalive_time=300 # 7200
    sysctl -q -w net.ipv4.tcp_keepalive_probes=2 # 9
    sysctl -q -w net.ipv4.tcp_keepalive_intvl=5 # 75

    # Wait to make sure network is there
    sleep 1

    # Prepare log files before losing root privileges
    touch /var/log/smeetsapp.log
    touch /var/log/smeetsapp.err
    chown smeetsapp:smeetsapp /var/log/smeetsapp.log
    chown smeetsapp:smeetsapp /var/log/smeetsapp.err

    start-stop-daemon --start --quiet --pidfile $PIDFILE --chuid $DAEMON_USER --background --exec $DAEMON --test > /dev/null \
      || { log_daemon_msg "already running"; return 1; }
    start-stop-daemon --start --quiet --chuid $DAEMON_USER --make-pidfile --pidfile $PIDFILE --background --exec $DAEMON -- $DAEMON_ARGS \
      || { log_daemon_msg "could not be started"; return 2; }
    log_daemon_msg "started"
}

do_stop()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --chuid $DAEMON_USER --exec $DAEMON
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2    
    start-stop-daemon --stop --quiet --oknodo --retry=0/3/KILL/5 --pidfile $PIDFILE --chuid $DAEMON_USER --exec $DAEMON -- $DAEMON_ARGS
    [ "$?" = 2 ] && return 2
    rm -f $PIDFILE
    [ "$RETVAL" = 1 ] && log_daemon_msg "not running"
    [ "$RETVAL" = 0 ] && log_daemon_msg "stopped"
    return "$RETVAL"
}

do_status()
{
  RUNNING=$(running)
  ispidactive=$(pidof $DAEMON | grep `cat $PIDFILE 2>&1` >/dev/null 2>&1)
  ISPIDACTIVE=$?
  if [ -n "$RUNNING" ]; then
    if [ $ISPIDACTIVE ]; then
      log_success_msg "$DESC is running"
      exit 0
    fi
  else
    if [ -f $PIDFILE ]; then
      log_success_msg "$DESC is NOT running, phantom pidfile $PIDFILE"
      exit 1
    else
      log_success_msg "$DESC is NOT running"
      exit 3
    fi
  fi
}

running()
{
  RUNSTAT=$(start-stop-daemon --quiet --start --pidfile $PIDFILE --chuid $DAEMON_USER --background --exec $DAEMON --test > /dev/null)
  if [ "$?" = 1 ]; then
    echo y
  fi
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC"
    do_start
    case "$?" in 
      0|1) log_end_msg 0 ;;
      2) log_end_msg 1 ;;
    esac
    ;;   
  stop)
    log_daemon_msg "Stopping $DESC"
    do_stop
    case "$?" in 
      0|1) log_end_msg 0 ;;
      2) log_end_msg 1 ;;
    esac
    ;;
  restart)
    log_daemon_msg "Restarting $DESC"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        log_end_msg 1
        ;;
    esac
    ;;
  status)
    do_status
    ;;
  *)
    echo "Usage: $0 (start|stop|restart|status)" >&2
    exit 3
    ;;
esac

exit 0
^D

sudo chmod +x /etc/init.d/smeetsapp
sudo insserv smeetsapp


